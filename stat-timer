#!/usr/local/bin/perl-latest
#
# A tool for helping track game stat changes over time.
#
# Set it up with a list of initial stats then you can enter changes and this
# times how long it was since the start to give progress over time. This set up
# can be done on command line or after starting the program.
#
# Then on subsequent prompts you can enter values in the same order (without
# needing to enter all values) or enter values with type to skip some or
# re-order them.
# 
# Say you have initial values of                : 12,123 xp 121 gold 18 gems
# Every so often you could enter just the new xp: 13700
#                                               : 14421
#                                               : 15638
# And less frequently enter all the values      : 16220 422 22
# Or just update a single column                : 25 gems
# 
# Then at the end you know how much xp, gold, and gems you got per
# unit of time. The final stats will be shown per second and per
# minute (under 15 minutes used) or per hour. Additionally, a
# command line to restart with final values is given.
#
# Non-data entry commands (enter alone):
#	p			pause the timer until unpause
#	pause			same as "p"
#	show			show all values (can be done while paused)
#	col			show current columns (can be done while paused)
#	u			unpause the timer
#	unpause			same as "u"
#
# Special flags (enter with data entry, at end of line):
#	!			last value, update and quit
#	=			show all values (not just updated)
#
# This lets you easily compare time efficiency of strategies.
#
# 4 May 2020

use strict;
use warnings;
use vars qw( @colnames %istats %lstats %nstats $stime $ltime $ntime $final
	     $runtime $pause $w $progname );

# so that fractional errors from pause don't accumulate to much
use Time::HiRes qw( time );

$progname = $0;

if(@ARGV) {
  $_ = join(' ', @ARGV);
} else {
  print "Enter initial stats and names to track. Format is any number of\n" .
    "numbers followed by optional white space followed by a column name.\n" .
    "Column names should start with a letter. Column names cannot contain\n" .
    "whitespace, but hyphens, underscores, etc okay. Eg:\n" .
    "       10,991 xp  50gold 10.2 lbs-meat -42 tea\n" .
    "\nStarting: ";
  $_ = <STDIN>;
}

# w is width for column names in printf()
$w = 4;
while(/\d/) {
  if (s/^\s*(-?\d[\d_,.]*)\s*([a-z]\S*)//i) {
    push(@colnames, $2);
    $istats{$2} = $lstats{$2} = clean($1);
    if(length($2) > $w) { $w = length($2); }
  } else {
    print "Didn't parse: $_\n";
    exit;
  }
}

$stime = time();
$" = ", ";
print "\nOkay, have [@colnames] set up.\n";
print "Changed values can now be entered without names if column order\n";
print "matches or with names if out of order. Use <space>! after values\n";
print "to indicate final set of numbers.\n";
print "Starting timer at " . scalar localtime($stime) . "\n\n";


while( (print "Next: "), defined($_ = <STDIN>) ) {
  $ntime = time();
  my $c = 0;
  my $show = 'changed';
  while( length($_) ) {
    s/^\s+//;

    if (s/^(-?\d[\d_,.]*)\s*([a-z]\S*)//i) {
      updatecol($2, $1);

    } elsif (s/^(-?\d[\d_,.]*)\s+($|[-\d_,.!=])/$2/) {
      updatecol($colnames[$c], $1);

    } elsif (s/^!//) {
      $final = 1;

    } elsif (s/^(=|show.*)//) {
      $show = 'all';

    } elsif (s/^col.*//) {
      $show = 'none';
      print "Columns are [@colnames]\n";

    } elsif (s/^p(a(u(s(e)?)?)?)?\b.*//) {
      $show = 'none';
      if($pause) {
        print "Was already paused.\n";
      } else {
        $pause = $ntime;
        if(!defined($ltime)) { $ltime = $stime; }
        $runtime += $ntime - $ltime;
        print "Now paused.\n";
      }

    } elsif (s/^u(n(p(a(u(s(e)?)?)?)?)?)?\b.*//) {
      $show = 'none';
      if($pause) {
        $ltime = $ntime;
        $pause = undef;
        print "Now unpaused.\n";
      } else {
        print "Was not paused.\n";
      }

    } elsif (s/^(\S+)//) {
      print "Can't understand col-value $1\n";
    }

    $c++;
  }

  if (!defined($runtime)) {
    $runtime  = $ntime - $stime;
    $ltime    = $ntime;
  } elsif (!defined($pause)) {
    $runtime += $ntime - $ltime;
    $ltime    = $ntime;
  }

  finishupdates();
  if ($show eq 'changed') { showchanged(); }
  elsif ($show eq 'all')  { showall();     }

  undef(%nstats);
  last if ($final);
}
print "\n";

showfinal();

sub updatecol {
  my $cname = shift;
  my $cval  = shift;
  
  $cval = clean($cval);

  if(!exists $istats{$cname}) {
    warn "Warning: $cname is a new column\n";
    $istats{$cname} = $lstats{$cname} = $nstats{$cname} = $cval;
    push(@colnames, $cname);
  } else {
    $nstats{$cname} = $cval;
  }
}

# always shows changed since START, maybe show changed from
# last at some point, only showing change from last would
# make typos in numbers a much bigger deal
sub showchanged {
  print "\n";
  my $diff;
  my $sec;
  my $first;

  $sec  = int($runtime);

  $first = showin($sec);

  for my $cname (@colnames) {
    if(exists($nstats{$cname})) {
      if($istats{$cname} != $nstats{$cname}) {
	print $first; $first = '';

        $diff = $nstats{$cname} - $istats{$cname};
        printf "%-${w}s  %10s change; %7.2f per second\n",
	        $cname, show($diff), ($diff/$sec);
      }
    }
  }

  print "\n";
}

# this used to happen as a side-effect of showchanged(), but
# that won't work in a showall() world
sub finishupdates() {
  for my $cname (@colnames) {
    if(exists($nstats{$cname})) {
      $lstats{$cname} = $nstats{$cname};
    }
  }
}

# showall has the guts of old showfinal() without the finality
# it returns a value used only in that function
sub showall {
  my $diff;
  my $punit;
  my $unit = 'hour';
  my $mult = 3600;
  my $cmd  = '';
  my $sec  = int($runtime);

  if($sec < 2) {	# don't let be zero
    $sec = 1;
  }
  print showin($sec);

  for my $cname (@colnames) {
    $cmd .= " $lstats{$cname}$cname";

    if($istats{$cname} == $lstats{$cname}) {
      printf "%-${w}s            NO change; still %s\n",
		 $cname,                         show($istats{$cname});
    } else {
      $diff = $lstats{$cname} - $istats{$cname};
      # %13s will let "+1,076,947.73" fit nicely
      printf "%-${w}s %13s change; %12s p/%s; %6s p/s\n",
	        $cname, show($diff,"signed"),
				     show(abs(($diff/$sec))*$mult),
				         $unit, show(abs($diff/$sec));
    }
  }

  $cmd;
}

# always show stats per hour and stats per second, for better
# comparisions between runs.
sub showfinal {
  my $cmd = $progname;

  print "\nFINAL\n\n";

  $cmd .= showall();

  # 870 is 14m30s, which properly rounds to fifteen minutes
  if($runtime < 870) {
    print "---------------------------------------------\n";
    print "Under fifteen minutes, stats per hour dubious\n";
    print "---------------------------------------------\n";
  }
  print "\n";
  print "Continue where you left off with\n  $cmd\n";
}

sub showin {
  my $sec = shift;
  my $htime;
  my $unit;

  if($sec < 2) {	# don't let be zero
    $sec = 1;
    $htime = 1;
    $unit = 'second';
  } elsif ($sec > 300 and $sec < 7200) {
    $htime = int($sec / 60);
    $unit = 'minutes';
  } elsif ($sec >= 7200) {
    $htime = int($sec / 3600);
    $unit = 'hours';
  } else {
    $htime = $sec;
    $unit = 'seconds';
  }

  return sprintf "In about %d %s (%s seconds):\n",
			   $htime,
			      $unit,
				 show($sec);
}

# remove commas from American human readable numbers or underscores from
# perl-style human readable numbers
sub clean {
  my $n = shift;
  $n =~ tr:,_::d;
  $n;
}

# format a number for printing,
# include optional second arg evaluating to true to force a sign
sub show {
  my $n    = shift;
  my $sign = shift;
  if ($sign) {
    if ($n < 0) {
      $sign = '-';
      $n *= -1;
    } else {
      $sign = '+';
    }
  } else {
    $sign = '';
  }
  if ($n =~ /\./) {
    $n = sprintf '%3.2f', $n;
  }
  # commify() from perlfaq
  1 while $n =~ s/^([-+]?\d+)(\d{3})/$1,$2/;
  "$sign$n";
}
